{"name":"PasswordReset","studio_file_name":"","typescript":"const EnrollmentProfile = 'Employee';\nimport { nim } from './nim';\n\n/**\n   * Retrieves the current enrollment for user\n   * @param {string} ExternalID - The external id for the enrollment\n   * @returns Enrollments mapping external id\n   */\nexport async function getEnrollment(ExternalID: string) {\n  let results = await nim.filterExecute('App_PasswordResetEnrollment_GetEnrollment', { ExternalID: ExternalID} )\n\n  return {\n    ID: results?.[0]?.ID ?? '',\n    Profile: results?.[0]?.Profile ?? '',\n    SmsPhoneNumber1: results?.[0]?.SmsPhoneNumber1 ?? '',\n    SmsPhoneNumber2: results?.[0]?.SmsPhoneNumber2 ?? '',\n    SmsPhoneNumber3: results?.[0]?.SmsPhoneNumber3 ?? '',\n    MailAddress1: results?.[0]?.MailAddress1 ?? '',\n    MailAddress2: results?.[0]?.MailAddress2 ?? '',\n    MailAddress3: results?.[0]?.MailAddress3 ?? ''\n  }\n}\n\nexport async function updateEnrollment(ID: number, Profile: string, ExternalID: string, SmsPhoneNumber1: string, SmsPhoneNumber2: string, SmsPhoneNumber3: string, MailAddress1: string, MailAddress2: string, MailAddress3: string) {\n  if(ID > 0) {\n    // Update Enrollment\n    await nim.targetSystemFunctionRun('internal', 'password_reset_update', {\n      ID: ID,\n      SmsPhoneNumber1: SmsPhoneNumber1 ?? null,\n      SmsPhoneNumber2: SmsPhoneNumber2 ?? null,\n      SmsPhoneNumber3: SmsPhoneNumber3 ?? null,\n      MailAddress1: MailAddress1 ?? null,\n      MailAddress2: MailAddress2 ?? null,\n      MailAddress3: MailAddress3 ?? null\n    })\n  } else {\n    // Create Enrollment\n    await nim.targetSystemFunctionRun('internal', 'password_reset_create', {\n      ExternalID: ExternalID,\n      Profile: EnrollmentProfile,\n      SmsPhoneNumber1: SmsPhoneNumber1,\n      SmsPhoneNumberLabel1: SmsPhoneNumber1 ? \"Send SMS to\" : '',\n      SmsPhoneNumber2: SmsPhoneNumber2,\n      SmsPhoneNumberLabel2: SmsPhoneNumber2 ? \"Send SMS to\" : '',\n      SmsPhoneNumber3: SmsPhoneNumber3,\n      SmsPhoneNumberLabel3: SmsPhoneNumber3 ? \"Send SMS to\" : '',\n      MailAddress1: MailAddress1,\n      MailAddressLabel1: MailAddress1 ? \"Send Email to\" : '',\n      MailAddress2: MailAddress2,\n      MailAddressLabel2: MailAddress2 ? \"Send Email to\" : '',\n      MailAddress3: MailAddress3,\n      MailAddressLabel3: MailAddress3 ? \"Send Email to\" : ''\n    })\n  }\n\n}","javascript":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnrollment = getEnrollment;\nexports.updateEnrollment = updateEnrollment;\n/// <reference types=\"node\" />\nconst EnrollmentProfile = 'Employee';\n/**\n   * Retrieves the current enrollment for user\n   * @param {string} ExternalID - The external id for the enrollment\n   * @returns Enrollments mapping external id\n   */\nfunction getEnrollment(ExternalID) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        let results = yield nim.filterExecute('App_PasswordResetEnrollment_GetEnrollment', { ExternalID: ExternalID });\n        return {\n            ID: (_b = (_a = results === null || results === void 0 ? void 0 : results[0]) === null || _a === void 0 ? void 0 : _a.ID) !== null && _b !== void 0 ? _b : '',\n            Profile: (_d = (_c = results === null || results === void 0 ? void 0 : results[0]) === null || _c === void 0 ? void 0 : _c.Profile) !== null && _d !== void 0 ? _d : '',\n            SmsPhoneNumber1: (_f = (_e = results === null || results === void 0 ? void 0 : results[0]) === null || _e === void 0 ? void 0 : _e.SmsPhoneNumber1) !== null && _f !== void 0 ? _f : '',\n            SmsPhoneNumber2: (_h = (_g = results === null || results === void 0 ? void 0 : results[0]) === null || _g === void 0 ? void 0 : _g.SmsPhoneNumber2) !== null && _h !== void 0 ? _h : '',\n            SmsPhoneNumber3: (_k = (_j = results === null || results === void 0 ? void 0 : results[0]) === null || _j === void 0 ? void 0 : _j.SmsPhoneNumber3) !== null && _k !== void 0 ? _k : '',\n            MailAddress1: (_m = (_l = results === null || results === void 0 ? void 0 : results[0]) === null || _l === void 0 ? void 0 : _l.MailAddress1) !== null && _m !== void 0 ? _m : '',\n            MailAddress2: (_p = (_o = results === null || results === void 0 ? void 0 : results[0]) === null || _o === void 0 ? void 0 : _o.MailAddress2) !== null && _p !== void 0 ? _p : '',\n            MailAddress3: (_r = (_q = results === null || results === void 0 ? void 0 : results[0]) === null || _q === void 0 ? void 0 : _q.MailAddress3) !== null && _r !== void 0 ? _r : ''\n        };\n    });\n}\nfunction updateEnrollment(ID, Profile, ExternalID, SmsPhoneNumber1, SmsPhoneNumber2, SmsPhoneNumber3, MailAddress1, MailAddress2, MailAddress3) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (ID > 0) {\n            // Update Enrollment\n            yield nim.targetSystemFunctionRun('internal', 'password_reset_update', {\n                ID: ID,\n                SmsPhoneNumber1: SmsPhoneNumber1 !== null && SmsPhoneNumber1 !== void 0 ? SmsPhoneNumber1 : null,\n                SmsPhoneNumber2: SmsPhoneNumber2 !== null && SmsPhoneNumber2 !== void 0 ? SmsPhoneNumber2 : null,\n                SmsPhoneNumber3: SmsPhoneNumber3 !== null && SmsPhoneNumber3 !== void 0 ? SmsPhoneNumber3 : null,\n                MailAddress1: MailAddress1 !== null && MailAddress1 !== void 0 ? MailAddress1 : null,\n                MailAddress2: MailAddress2 !== null && MailAddress2 !== void 0 ? MailAddress2 : null,\n                MailAddress3: MailAddress3 !== null && MailAddress3 !== void 0 ? MailAddress3 : null\n            });\n        }\n        else {\n            // Create Enrollment\n            yield nim.targetSystemFunctionRun('internal', 'password_reset_create', {\n                ExternalID: ExternalID,\n                Profile: EnrollmentProfile,\n                SmsPhoneNumber1: SmsPhoneNumber1,\n                SmsPhoneNumberLabel1: SmsPhoneNumber1 ? \"Send SMS to\" : '',\n                SmsPhoneNumber2: SmsPhoneNumber2,\n                SmsPhoneNumberLabel2: SmsPhoneNumber2 ? \"Send SMS to\" : '',\n                SmsPhoneNumber3: SmsPhoneNumber3,\n                SmsPhoneNumberLabel3: SmsPhoneNumber3 ? \"Send SMS to\" : '',\n                MailAddress1: MailAddress1,\n                MailAddressLabel1: MailAddress1 ? \"Send Email to\" : '',\n                MailAddress2: MailAddress2,\n                MailAddressLabel2: MailAddress2 ? \"Send Email to\" : '',\n                MailAddress3: MailAddress3,\n                MailAddressLabel3: MailAddress3 ? \"Send Email to\" : ''\n            });\n        }\n    });\n}\n","production_ready":true,"message":"","signatures":[{"name":"getEnrollment","input_args":[{"name":"ExternalID","type":0}],"output_args":[{"name":"ID","type":8},{"name":"Profile","type":8},{"name":"SmsPhoneNumber1","type":8},{"name":"SmsPhoneNumber2","type":8},{"name":"SmsPhoneNumber3","type":8},{"name":"MailAddress1","type":8},{"name":"MailAddress2","type":8},{"name":"MailAddress3","type":8}]},{"name":"updateEnrollment","input_args":[{"name":"ID","type":1},{"name":"Profile","type":0},{"name":"ExternalID","type":0},{"name":"SmsPhoneNumber1","type":0},{"name":"SmsPhoneNumber2","type":0},{"name":"SmsPhoneNumber3","type":0},{"name":"MailAddress1","type":0},{"name":"MailAddress2","type":0},{"name":"MailAddress3","type":0}],"output_args":[]}]}